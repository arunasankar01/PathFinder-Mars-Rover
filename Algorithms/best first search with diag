#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Jul 24 16:13:07 2020

@author: radhakrishna
"""

def calcHvalue(dest,rr,cc,h): 
    delx= rr-dest[0]
    if delx<0 :
        delx=delx*-1
    dely= cc-dest[1]
    if dely<0: 
        dely=dely* -1
    
    t=delx-dely
    if t<0 :
        t=t*-1
    if h=="m" :
        f= delx+dely
        return f
    if h=="e" :
        f= (((delx)**2) + ((dely)**2))
        return f
    if h=="o" :
        f= (1.414* min(delx,dely))+ t
        return f
    if h=="c" :
        f=max(delx,dely)
        return f


R=5
C=6

m=[[0,1,0,0,0,0],
   [0,0,0,0,0,0],
   [0,1,0,1,0,0],
   [0,1,0,0,1,0],
   [0,0,0,0,1,0]]

source=[0,0]
dest=[4,5]
htype="e"
row_queue=[]
column_queue=[]

move_count=0
nodes_left_in_layer=1
nodes_in_next_layer=0

reached_end= False

visited=[[False,False,False,False,False,False],
         [False,False,False,False,False,False],
         [False,False,False,False,False,False],
         [False,False,False,False,False,False],
         [False,False,False,False,False,False]
         ]

dr=[-1,1,0,0]
dc=[0,0,1,-1]

row_queue.append(source[0])
column_queue.append(source[1])
visited[source[0]][source[1]]=True

heu=[]
row=[]
col=[]
k=0
while len(row_queue) > 0: 
    
    r= row_queue.pop(0)
    c= column_queue.pop(0)
    
    if [r,c]== dest: 
        reached_end= True
        break
    i=0
    
    for i in range(len(dr)):
        rr= r+ dr[i]
        cc= c+ dc[i]
    
        if rr<0 or cc<0 : 
          continue
        if rr>=R or cc>=C :
          continue
    
        if visited[rr][cc]== True:
          continue
        if m[rr][cc] == 1:
          continue
         
        
        f= calcHvalue(dest,rr,cc,htype)
        heu.append(f.real)
        row.append(rr)
        col.append(cc)
        k=k+1
        visited[rr][cc]=True
        nodes_in_next_layer= nodes_in_next_layer + 1
    
    j=0
    for j in range(len(heu)): 
        
        ikea= min(heu)
        mini = heu.index(ikea)
        row_queue.append(row[mini])
        column_queue.append(col[mini])
        heu.pop(mini)
        
    
    heu.clear()
    row.clear()
    col.clear()
    k=0    
    nodes_left_in_layer = nodes_left_in_layer - 1
    if nodes_left_in_layer == 0: 
        nodes_left_in_layer = nodes_in_next_layer
        nodes_in_next_layer=0
        move_count= move_count + 1
    
if reached_end == False: 
        print(-1)
else:
        print(move_count)